{"ast":null,"code":"var _jsxFileName = \"/Users/otaviocunha/Desktop/Programac\\u0327a\\u0303o/Brincadeiras/PedidoComDeploy/SiteNovo/src/pages/Projects/ForcaGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ForcaGame.scss\"; // Importe o arquivo SCSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ForcaGame() {\n  _s();\n  const secretPhrase = \"quer namorar comigo?\";\n  const [displayPhrase, setDisplayPhrase] = useState(Array(secretPhrase.length).fill(\"_\"));\n  const [usedLetters, setUsedLetters] = useState([]);\n  const maxAttempts = 10;\n  const [attemptsLeft, setAttemptsLeft] = useState(maxAttempts);\n  const handleGuess = guess => {\n    if (usedLetters.includes(guess)) {\n      // A letra já foi usada\n      return;\n    }\n    const newUsedLetters = [...usedLetters, guess];\n    setUsedLetters(newUsedLetters);\n    if (!secretPhrase.includes(guess)) {\n      setAttemptsLeft(attemptsLeft - 1);\n    }\n    const newDisplayPhrase = [...displayPhrase];\n    for (let i = 0; i < secretPhrase.length; i++) {\n      if (secretPhrase[i] === guess) {\n        newDisplayPhrase[i] = guess;\n      }\n    }\n    setDisplayPhrase(newDisplayPhrase);\n  };\n  const renderAlphabetButtons = () => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    return alphabet.split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleGuess(letter),\n      children: letter.toUpperCase()\n    }, letter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forca-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jogo da Forca\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"phrase-label\",\n      children: \"Frase a ser adivinhada:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"phrase\",\n      children: displayPhrase.join(\" \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"attempts-left\",\n      children: [\"Tentativas restantes: \", attemptsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alphabet-buttons\",\n      children: renderAlphabetButtons()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(ForcaGame, \"gDggeENy6/rIgY/O1Azh9LeK1DM=\");\n_c = ForcaGame;\nexport default ForcaGame;\nvar _c;\n$RefreshReg$(_c, \"ForcaGame\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ForcaGame","_s","secretPhrase","displayPhrase","setDisplayPhrase","Array","length","fill","usedLetters","setUsedLetters","maxAttempts","attemptsLeft","setAttemptsLeft","handleGuess","guess","includes","newUsedLetters","newDisplayPhrase","i","renderAlphabetButtons","alphabet","split","map","letter","onClick","children","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","className","join","_c","$RefreshReg$"],"sources":["/Users/otaviocunha/Desktop/Programação/Brincadeiras/PedidoComDeploy/SiteNovo/src/pages/Projects/ForcaGame.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ForcaGame.scss\"; // Importe o arquivo SCSS\n\nfunction ForcaGame() {\n  const secretPhrase = \"quer namorar comigo?\";\n  const [displayPhrase, setDisplayPhrase] = useState(\n    Array(secretPhrase.length).fill(\"_\")\n  );\n\n  const [usedLetters, setUsedLetters] = useState([]);\n  const maxAttempts = 10;\n  const [attemptsLeft, setAttemptsLeft] = useState(maxAttempts);\n\n  const handleGuess = (guess) => {\n    if (usedLetters.includes(guess)) {\n      // A letra já foi usada\n      return;\n    }\n\n    const newUsedLetters = [...usedLetters, guess];\n    setUsedLetters(newUsedLetters);\n\n    if (!secretPhrase.includes(guess)) {\n      setAttemptsLeft(attemptsLeft - 1);\n    }\n\n    const newDisplayPhrase = [...displayPhrase];\n    for (let i = 0; i < secretPhrase.length; i++) {\n      if (secretPhrase[i] === guess) {\n        newDisplayPhrase[i] = guess;\n      }\n    }\n    setDisplayPhrase(newDisplayPhrase);\n  };\n\n  const renderAlphabetButtons = () => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    return alphabet.split(\"\").map((letter) => (\n      <button key={letter} onClick={() => handleGuess(letter)}>\n        {letter.toUpperCase()}\n      </button>\n    ));\n  };\n\n  return (\n    <div className=\"forca-game\">\n      <h1>Jogo da Forca</h1>\n      <p className=\"phrase-label\">Frase a ser adivinhada:</p>\n      <p className=\"phrase\">{displayPhrase.join(\" \")}</p>\n      <p className=\"attempts-left\">Tentativas restantes: {attemptsLeft}</p>\n      <div className=\"alphabet-buttons\">{renderAlphabetButtons()}</div>\n    </div>\n  );\n}\n\nexport default ForcaGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}